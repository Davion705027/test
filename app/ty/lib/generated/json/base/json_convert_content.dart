// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart' show debugPrint;
import 'package:flutter_ty_app/app/services/api/analyze_v_s_info_entity.dart';
import 'package:flutter_ty_app/app/services/models/req/bet_amount_req.dart';
import 'package:flutter_ty_app/app/services/models/req/bet_req.dart';
import 'package:flutter_ty_app/app/services/models/req/latest_market_req.dart';
import 'package:flutter_ty_app/app/services/models/res/access_config.dart';
import 'package:flutter_ty_app/app/services/models/res/account_info.dart';
import 'package:flutter_ty_app/app/services/models/res/analyze_back_video_info_entity_entity_entity_entity.dart';
import 'package:flutter_ty_app/app/services/models/res/analyze_get_match_analysise_data_entity.dart';
import 'package:flutter_ty_app/app/services/models/res/analyze_get_match_analysise_data_item_entity.dart';
import 'package:flutter_ty_app/app/services/models/res/analyze_team_vs_history_entity.dart';
import 'package:flutter_ty_app/app/services/models/res/analyze_team_vs_other_team_item_entity_entity.dart';
import 'package:flutter_ty_app/app/services/models/res/balance_entity.dart';
import 'package:flutter_ty_app/app/services/models/res/bet_amount_entity.dart';
import 'package:flutter_ty_app/app/services/models/res/bet_result_entity.dart';
import 'package:flutter_ty_app/app/services/models/res/cancel_pre_bet_order_entity.dart';
import 'package:flutter_ty_app/app/services/models/res/category_list_entity.dart';
import 'package:flutter_ty_app/app/services/models/res/champion_match_result_entity.dart';
import 'package:flutter_ty_app/app/services/models/res/collection_count_info.dart';
import 'package:flutter_ty_app/app/services/models/res/collection_info.dart';
import 'package:flutter_ty_app/app/services/models/res/common_score_model_entity.dart';
import 'package:flutter_ty_app/app/services/models/res/detail_video_entity.dart';
import 'package:flutter_ty_app/app/services/models/res/dj_date_entity_entity.dart';
import 'package:flutter_ty_app/app/services/models/res/dj_list_entity.dart';
import 'package:flutter_ty_app/app/services/models/res/event_info_entity.dart';
import 'package:flutter_ty_app/app/services/models/res/get_cashout_max_amount_list_entity.dart';
import 'package:flutter_ty_app/app/services/models/res/get_filter_match_list_new_entity.dart';
import 'package:flutter_ty_app/app/services/models/res/get_h5_order_list_entity.dart';
import 'package:flutter_ty_app/app/services/models/res/get_h5_pre_bet_orderlist_entity.dart';
import 'package:flutter_ty_app/app/services/models/res/get_match_result_entity.dart';
import 'package:flutter_ty_app/app/services/models/res/get_result_match_detail_entity.dart';
import 'package:flutter_ty_app/app/services/models/res/get_user_customize_info_entity.dart';
import 'package:flutter_ty_app/app/services/models/res/group_soure_model_entity.dart';
import 'package:flutter_ty_app/app/services/models/res/item_disuse_entity.dart';
import 'package:flutter_ty_app/app/services/models/res/last_market_entity.dart';
import 'package:flutter_ty_app/app/services/models/res/live_video_url_entity.dart';
import 'package:flutter_ty_app/app/services/models/res/login_panda_entity.dart';
import 'package:flutter_ty_app/app/services/models/res/macth_details_news_new_entity.dart';
import 'package:flutter_ty_app/app/services/models/res/match_detail_entity.dart';
import 'package:flutter_ty_app/app/services/models/res/match_details_history_entity.dart';
import 'package:flutter_ty_app/app/services/models/res/match_details_league_points_entity.dart';
import 'package:flutter_ty_app/app/services/models/res/match_details_news_entity.dart';
import 'package:flutter_ty_app/app/services/models/res/match_details_recent_entity.dart';
import 'package:flutter_ty_app/app/services/models/res/match_disk_surface_entity.dart';
import 'package:flutter_ty_app/app/services/models/res/match_entity.dart';
import 'package:flutter_ty_app/app/services/models/res/match_info.dart';
import 'package:flutter_ty_app/app/services/models/res/match_intelligence_entity.dart';
import 'package:flutter_ty_app/app/services/models/res/match_lineup_entity.dart';
import 'package:flutter_ty_app/app/services/models/res/match_technology_entity.dart';
import 'package:flutter_ty_app/app/services/models/res/matche_handpick_entity.dart';
import 'package:flutter_ty_app/app/services/models/res/matche_result_entity.dart';
import 'package:flutter_ty_app/app/services/models/res/mchampion_match_result_entity.dart';
import 'package:flutter_ty_app/app/services/models/res/menu_count_info_entity.dart';
import 'package:flutter_ty_app/app/services/models/res/menu_entity.dart';
import 'package:flutter_ty_app/app/services/models/res/notice_center_entity.dart';
import 'package:flutter_ty_app/app/services/models/res/order_pre_settle_entity.dart';
import 'package:flutter_ty_app/app/services/models/res/origin_data_entity.dart';
import 'package:flutter_ty_app/app/services/models/res/playback_video_url_entity.dart';
import 'package:flutter_ty_app/app/services/models/res/save_user_customize_info_entity.dart';
import 'package:flutter_ty_app/app/services/models/res/set_user_language_entity.dart';
import 'package:flutter_ty_app/app/services/models/res/sport_config_info.dart';
import 'package:flutter_ty_app/app/services/models/res/sport_entity.dart';
import 'package:flutter_ty_app/app/services/models/res/team_entity.dart';
import 'package:flutter_ty_app/app/services/models/res/test_info.dart';
import 'package:flutter_ty_app/app/services/models/res/update_pre_bet_odds_entity.dart';
import 'package:flutter_ty_app/app/services/models/res/user_info.dart';
import 'package:flutter_ty_app/app/services/models/res/user_personalise_entity.dart';
import 'package:flutter_ty_app/app/services/models/res/video_animation_url_entity.dart';
import 'package:flutter_ty_app/app/services/models/res/vr_history_dog_entity.dart';
import 'package:flutter_ty_app/app/services/models/res/vr_hot_entity.dart';
import 'package:flutter_ty_app/app/services/models/res/vr_match_entity.dart';
import 'package:flutter_ty_app/app/services/models/res/vr_ranking_entity.dart';
import 'package:flutter_ty_app/app/services/models/res/vr_sport_replay_entity.dart';
import 'package:flutter_ty_app/app/services/models/res/vr_sports_menu_entity.dart';
import 'package:flutter_ty_app/app/services/req/collection_req.dart';

JsonConvert jsonConvert = JsonConvert();

typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);
typedef EnumConvertFunction<T> = T Function(String value);
typedef ConvertExceptionHandler = void Function(Object error, StackTrace stackTrace);
extension MapSafeExt<K, V> on Map<K, V> {
  T? getOrNull<T>(K? key) {
    if (!containsKey(key) || key == null) {
      return null;
    } else {
      return this[key] as T?;
    }
  }
}

class JsonConvert {
  static ConvertExceptionHandler? onError;
  JsonConvertClassCollection convertFuncMap = JsonConvertClassCollection();

  /// When you are in the development, to generate a new model class, hot-reload doesn't find new generation model class, you can build on MaterialApp method called jsonConvert. ReassembleConvertFuncMap (); This method only works in a development environment
  /// https://flutter.cn/docs/development/tools/hot-reload
  /// class MyApp extends StatelessWidget {
  ///    const MyApp({Key? key})
  ///        : super(key: key);
  ///
  ///    @override
  ///    Widget build(BuildContext context) {
  ///      jsonConvert.reassembleConvertFuncMap();
  ///      return MaterialApp();
  ///    }
  /// }
  void reassembleConvertFuncMap() {
    bool isReleaseMode = const bool.fromEnvironment('dart.vm.product');
    if (!isReleaseMode) {
      convertFuncMap = JsonConvertClassCollection();
    }
  }

  T? convert<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    if (value is T) {
      return value;
    }
    try {
      return _asT<T>(value, enumConvert: enumConvert);
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return null;
    }
  }

  List<T?>? convertList<T>(List<dynamic>? value,
      {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => _asT<T>(e, enumConvert: enumConvert))
          .toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) =>
      _asT<T>(e, enumConvert: enumConvert)!).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  T? _asT<T extends Object?>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    final String type = T.toString();
    final String valueS = value.toString();
    if (enumConvert != null) {
      return enumConvert(valueS) as T;
    } else if (type == "String") {
      return valueS as T;
    } else if (type == "int") {
      final int? intValue = int.tryParse(valueS);
      if (intValue == null) {
        return double.tryParse(valueS)?.toInt() as T?;
      } else {
        return intValue as T;
      }
    } else if (type == "double") {
      return double.parse(valueS) as T;
    } else if (type == "DateTime") {
      return DateTime.parse(valueS) as T;
    } else if (type == "bool") {
      if (valueS == '0' || valueS == '1') {
        return (valueS == '1') as T;
      }
      return (valueS == 'true') as T;
    } else if (type == "Map" || type.startsWith("Map<")) {
      return value as T;
    } else {
      if (convertFuncMap.containsKey(type)) {
        if (value == null) {
          return null;
        }
        return convertFuncMap[type]!(value as Map<String, dynamic>) as T;
      } else {
        throw UnimplementedError(
            '$type unimplemented,you can try running the app again');
      }
    }
  }

  //list is returned by type
  static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
    if (<AnalyzeVSInfoEntity>[] is M) {
      return data.map<AnalyzeVSInfoEntity>((Map<String, dynamic> e) =>
          AnalyzeVSInfoEntity.fromJson(e)).toList() as M;
    }
    if (<BetAmountReq>[] is M) {
      return data.map<BetAmountReq>((Map<String, dynamic> e) =>
          BetAmountReq.fromJson(e)).toList() as M;
    }
    if (<BetAmountReqOrderMaxBetMoney>[] is M) {
      return data.map<BetAmountReqOrderMaxBetMoney>((Map<String, dynamic> e) =>
          BetAmountReqOrderMaxBetMoney.fromJson(e)).toList() as M;
    }
    if (<BetReq>[] is M) {
      return data.map<BetReq>((Map<String, dynamic> e) => BetReq.fromJson(e))
          .toList() as M;
    }
    if (<BetReqSeriesOrders>[] is M) {
      return data.map<BetReqSeriesOrders>((Map<String, dynamic> e) =>
          BetReqSeriesOrders.fromJson(e)).toList() as M;
    }
    if (<BetReqSeriesOrdersOrderDetailList>[] is M) {
      return data.map<BetReqSeriesOrdersOrderDetailList>((
          Map<String, dynamic> e) =>
          BetReqSeriesOrdersOrderDetailList.fromJson(e)).toList() as M;
    }
    if (<LatestMarketReq>[] is M) {
      return data.map<LatestMarketReq>((Map<String, dynamic> e) =>
          LatestMarketReq.fromJson(e)).toList() as M;
    }
    if (<LatestMarketReqIdList>[] is M) {
      return data.map<LatestMarketReqIdList>((Map<String, dynamic> e) =>
          LatestMarketReqIdList.fromJson(e)).toList() as M;
    }
    if (<AccessConfig>[] is M) {
      return data.map<AccessConfig>((Map<String, dynamic> e) =>
          AccessConfig.fromJson(e)).toList() as M;
    }
    if (<AccountInfo>[] is M) {
      return data.map<AccountInfo>((Map<String, dynamic> e) =>
          AccountInfo.fromJson(e)).toList() as M;
    }
    if (<AnalyzeBackVideoInfoEntityEntityEntityEntity>[] is M) {
      return data.map<AnalyzeBackVideoInfoEntityEntityEntityEntity>((
          Map<String, dynamic> e) =>
          AnalyzeBackVideoInfoEntityEntityEntityEntity.fromJson(e))
          .toList() as M;
    }
    if (<AnalyzeBackVideoInfoEntityEntityEntityEventList>[] is M) {
      return data.map<AnalyzeBackVideoInfoEntityEntityEntityEventList>((
          Map<String, dynamic> e) =>
          AnalyzeBackVideoInfoEntityEntityEntityEventList.fromJson(e))
          .toList() as M;
    }
    if (<AnalyzeGetMatchAnalysiseDataEntity>[] is M) {
      return data.map<AnalyzeGetMatchAnalysiseDataEntity>((
          Map<String, dynamic> e) =>
          AnalyzeGetMatchAnalysiseDataEntity.fromJson(e)).toList() as M;
    }
    if (<AnalyzeGetMatchAnalysiseDataInParam>[] is M) {
      return data.map<AnalyzeGetMatchAnalysiseDataInParam>((
          Map<String, dynamic> e) =>
          AnalyzeGetMatchAnalysiseDataInParam.fromJson(e)).toList() as M;
    }
    if (<AnalyzeGetMatchAnalysiseDataMatchHistoryBattleDTOMap>[] is M) {
      return data.map<AnalyzeGetMatchAnalysiseDataMatchHistoryBattleDTOMap>((
          Map<String, dynamic> e) =>
          AnalyzeGetMatchAnalysiseDataMatchHistoryBattleDTOMap.fromJson(e))
          .toList() as M;
    }
    if (<AnalyzeGetMatchAnalysiseDataMatchHistoryBattleDTOMap1>[] is M) {
      return data.map<AnalyzeGetMatchAnalysiseDataMatchHistoryBattleDTOMap1>((
          Map<String, dynamic> e) =>
          AnalyzeGetMatchAnalysiseDataMatchHistoryBattleDTOMap1.fromJson(e))
          .toList() as M;
    }
    if (<
        AnalyzeGetMatchAnalysiseDataMatchHistoryBattleDTOMap1MatchHistoryBattleDetailDTOList>[
    ] is M) {
      return data.map<
          AnalyzeGetMatchAnalysiseDataMatchHistoryBattleDTOMap1MatchHistoryBattleDetailDTOList>((
          Map<String, dynamic> e) =>
          AnalyzeGetMatchAnalysiseDataMatchHistoryBattleDTOMap1MatchHistoryBattleDetailDTOList
              .fromJson(e)).toList() as M;
    }
    if (<AnalyzeGetMatchAnalysiseDataMatchHistoryBattleDTOMap2>[] is M) {
      return data.map<AnalyzeGetMatchAnalysiseDataMatchHistoryBattleDTOMap2>((
          Map<String, dynamic> e) =>
          AnalyzeGetMatchAnalysiseDataMatchHistoryBattleDTOMap2.fromJson(e))
          .toList() as M;
    }
    if (<
        AnalyzeGetMatchAnalysiseDataMatchHistoryBattleDTOMap2MatchHistoryBattleDetailDTOList>[
    ] is M) {
      return data.map<
          AnalyzeGetMatchAnalysiseDataMatchHistoryBattleDTOMap2MatchHistoryBattleDetailDTOList>((
          Map<String, dynamic> e) =>
          AnalyzeGetMatchAnalysiseDataMatchHistoryBattleDTOMap2MatchHistoryBattleDetailDTOList
              .fromJson(e)).toList() as M;
    }
    if (<AnalyzeGetMatchAnalysiseDataItemEntity>[] is M) {
      return data.map<AnalyzeGetMatchAnalysiseDataItemEntity>((
          Map<String, dynamic> e) =>
          AnalyzeGetMatchAnalysiseDataItemEntity.fromJson(e)).toList() as M;
    }
    if (<AnalyzeGetMatchAnalysiseDataItemInParam>[] is M) {
      return data.map<AnalyzeGetMatchAnalysiseDataItemInParam>((
          Map<String, dynamic> e) =>
          AnalyzeGetMatchAnalysiseDataItemInParam.fromJson(e)).toList() as M;
    }
    if (<AnalyzeGetMatchAnalysiseDataItemBasicInfoMap>[] is M) {
      return data.map<AnalyzeGetMatchAnalysiseDataItemBasicInfoMap>((
          Map<String, dynamic> e) =>
          AnalyzeGetMatchAnalysiseDataItemBasicInfoMap.fromJson(e))
          .toList() as M;
    }
    if (<
        AnalyzeGetMatchAnalysiseDataItemBasicInfoMapSThirdMatchSidelinedDTOMap>[
    ] is M) {
      return data.map<
          AnalyzeGetMatchAnalysiseDataItemBasicInfoMapSThirdMatchSidelinedDTOMap>((
          Map<String, dynamic> e) =>
          AnalyzeGetMatchAnalysiseDataItemBasicInfoMapSThirdMatchSidelinedDTOMap
              .fromJson(e)).toList() as M;
    }
    if (<
        AnalyzeGetMatchAnalysiseDataItemBasicInfoMapSThirdMatchFutureStatisticsDTOMap>[
    ] is M) {
      return data.map<
          AnalyzeGetMatchAnalysiseDataItemBasicInfoMapSThirdMatchFutureStatisticsDTOMap>((
          Map<String, dynamic> e) =>
          AnalyzeGetMatchAnalysiseDataItemBasicInfoMapSThirdMatchFutureStatisticsDTOMap
              .fromJson(e)).toList() as M;
    }
    if (<
        AnalyzeGetMatchAnalysiseDataItemBasicInfoMapSThirdMatchFutureStatisticsDTOMap1>[
    ] is M) {
      return data.map<
          AnalyzeGetMatchAnalysiseDataItemBasicInfoMapSThirdMatchFutureStatisticsDTOMap1>((
          Map<String, dynamic> e) =>
          AnalyzeGetMatchAnalysiseDataItemBasicInfoMapSThirdMatchFutureStatisticsDTOMap1
              .fromJson(e)).toList() as M;
    }
    if (<
        AnalyzeGetMatchAnalysiseDataItemBasicInfoMapSThirdMatchFutureStatisticsDTOMap2>[
    ] is M) {
      return data.map<
          AnalyzeGetMatchAnalysiseDataItemBasicInfoMapSThirdMatchFutureStatisticsDTOMap2>((
          Map<String, dynamic> e) =>
          AnalyzeGetMatchAnalysiseDataItemBasicInfoMapSThirdMatchFutureStatisticsDTOMap2
              .fromJson(e)).toList() as M;
    }
    if (<AnalyzeTeamVsHistoryEntity>[] is M) {
      return data.map<AnalyzeTeamVsHistoryEntity>((Map<String, dynamic> e) =>
          AnalyzeTeamVsHistoryEntity.fromJson(e)).toList() as M;
    }
    if (<AnalyzeTeamVsOtherTeamItemEntityEntity>[] is M) {
      return data.map<AnalyzeTeamVsOtherTeamItemEntityEntity>((
          Map<String, dynamic> e) =>
          AnalyzeTeamVsOtherTeamItemEntityEntity.fromJson(e)).toList() as M;
    }
    if (<BalanceEntity>[] is M) {
      return data.map<BalanceEntity>((Map<String, dynamic> e) =>
          BalanceEntity.fromJson(e)).toList() as M;
    }
    if (<BetAmountEntity>[] is M) {
      return data.map<BetAmountEntity>((Map<String, dynamic> e) =>
          BetAmountEntity.fromJson(e)).toList() as M;
    }
    if (<BetAmountBetAmountInfo>[] is M) {
      return data.map<BetAmountBetAmountInfo>((Map<String, dynamic> e) =>
          BetAmountBetAmountInfo.fromJson(e)).toList() as M;
    }
    if (<BetResultEntity>[] is M) {
      return data.map<BetResultEntity>((Map<String, dynamic> e) =>
          BetResultEntity.fromJson(e)).toList() as M;
    }
    if (<BetResultOrderDetailRespList>[] is M) {
      return data.map<BetResultOrderDetailRespList>((Map<String, dynamic> e) =>
          BetResultOrderDetailRespList.fromJson(e)).toList() as M;
    }
    if (<BetResultSeriesOrderRespList>[] is M) {
      return data.map<BetResultSeriesOrderRespList>((Map<String, dynamic> e) =>
          BetResultSeriesOrderRespList.fromJson(e)).toList() as M;
    }
    if (<CancelPreBetOrderEntity>[] is M) {
      return data.map<CancelPreBetOrderEntity>((Map<String, dynamic> e) =>
          CancelPreBetOrderEntity.fromJson(e)).toList() as M;
    }
    if (<CategoryListEntity>[] is M) {
      return data.map<CategoryListEntity>((Map<String, dynamic> e) =>
          CategoryListEntity.fromJson(e)).toList() as M;
    }
    if (<CategoryListData>[] is M) {
      return data.map<CategoryListData>((Map<String, dynamic> e) =>
          CategoryListData.fromJson(e)).toList() as M;
    }
    if (<ChampionMatchResultEntity>[] is M) {
      return data.map<ChampionMatchResultEntity>((Map<String, dynamic> e) =>
          ChampionMatchResultEntity.fromJson(e)).toList() as M;
    }
    if (<ChampionMatchResultData>[] is M) {
      return data.map<ChampionMatchResultData>((Map<String, dynamic> e) =>
          ChampionMatchResultData.fromJson(e)).toList() as M;
    }
    if (<CollectionCountInfo>[] is M) {
      return data.map<CollectionCountInfo>((Map<String, dynamic> e) =>
          CollectionCountInfo.fromJson(e)).toList() as M;
    }
    if (<CollectionInfo>[] is M) {
      return data.map<CollectionInfo>((Map<String, dynamic> e) =>
          CollectionInfo.fromJson(e)).toList() as M;
    }
    if (<CollectionInfoExclude>[] is M) {
      return data.map<CollectionInfoExclude>((Map<String, dynamic> e) =>
          CollectionInfoExclude.fromJson(e)).toList() as M;
    }
    if (<CommonScoreModelEntity>[] is M) {
      return data.map<CommonScoreModelEntity>((Map<String, dynamic> e) =>
          CommonScoreModelEntity.fromJson(e)).toList() as M;
    }
    if (<CommonScoreModelData>[] is M) {
      return data.map<CommonScoreModelData>((Map<String, dynamic> e) =>
          CommonScoreModelData.fromJson(e)).toList() as M;
    }
    if (<DetailVideoEntity>[] is M) {
      return data.map<DetailVideoEntity>((Map<String, dynamic> e) =>
          DetailVideoEntity.fromJson(e)).toList() as M;
    }
    if (<DjDateEntityEntity>[] is M) {
      return data.map<DjDateEntityEntity>((Map<String, dynamic> e) =>
          DjDateEntityEntity.fromJson(e)).toList() as M;
    }
    if (<DjListEntity>[] is M) {
      return data.map<DjListEntity>((Map<String, dynamic> e) =>
          DjListEntity.fromJson(e)).toList() as M;
    }
    if (<DjListHps>[] is M) {
      return data.map<DjListHps>((Map<String, dynamic> e) =>
          DjListHps.fromJson(e)).toList() as M;
    }
    if (<DjListHpsHl>[] is M) {
      return data.map<DjListHpsHl>((Map<String, dynamic> e) =>
          DjListHpsHl.fromJson(e)).toList() as M;
    }
    if (<DjListHpsHlOl>[] is M) {
      return data.map<DjListHpsHlOl>((Map<String, dynamic> e) =>
          DjListHpsHlOl.fromJson(e)).toList() as M;
    }
    if (<EventInfo2Entity>[] is M) {
      return data.map<EventInfo2Entity>((Map<String, dynamic> e) =>
          EventInfo2Entity.fromJson(e)).toList() as M;
    }
    if (<EventInfo2Data>[] is M) {
      return data.map<EventInfo2Data>((Map<String, dynamic> e) =>
          EventInfo2Data.fromJson(e)).toList() as M;
    }
    if (<GetCashoutMaxAmountListEntity>[] is M) {
      return data.map<GetCashoutMaxAmountListEntity>((Map<String, dynamic> e) =>
          GetCashoutMaxAmountListEntity.fromJson(e)).toList() as M;
    }
    if (<GetCashoutMaxAmountListData>[] is M) {
      return data.map<GetCashoutMaxAmountListData>((Map<String, dynamic> e) =>
          GetCashoutMaxAmountListData.fromJson(e)).toList() as M;
    }
    if (<GetFilterMatchListNewEntity>[] is M) {
      return data.map<GetFilterMatchListNewEntity>((Map<String, dynamic> e) =>
          GetFilterMatchListNewEntity.fromJson(e)).toList() as M;
    }
    if (<GetFilterMatchListNewData>[] is M) {
      return data.map<GetFilterMatchListNewData>((Map<String, dynamic> e) =>
          GetFilterMatchListNewData.fromJson(e)).toList() as M;
    }
    if (<GetH5OrderListEntity>[] is M) {
      return data.map<GetH5OrderListEntity>((Map<String, dynamic> e) =>
          GetH5OrderListEntity.fromJson(e)).toList() as M;
    }
    if (<GetH5OrderListData>[] is M) {
      return data.map<GetH5OrderListData>((Map<String, dynamic> e) =>
          GetH5OrderListData.fromJson(e)).toList() as M;
    }
    if (<GetH5OrderListDataRecordx>[] is M) {
      return data.map<GetH5OrderListDataRecordx>((Map<String, dynamic> e) =>
          GetH5OrderListDataRecordx.fromJson(e)).toList() as M;
    }
    if (<GetH5OrderListDataRecordxData>[] is M) {
      return data.map<GetH5OrderListDataRecordxData>((Map<String, dynamic> e) =>
          GetH5OrderListDataRecordxData.fromJson(e)).toList() as M;
    }
    if (<GetH5OrderListDataRecordxDataDetailList>[] is M) {
      return data.map<GetH5OrderListDataRecordxDataDetailList>((
          Map<String, dynamic> e) =>
          GetH5OrderListDataRecordxDataDetailList.fromJson(e)).toList() as M;
    }
    if (<GetH5OrderListDataRecordxDataOrderVOS>[] is M) {
      return data.map<GetH5OrderListDataRecordxDataOrderVOS>((
          Map<String, dynamic> e) =>
          GetH5OrderListDataRecordxDataOrderVOS.fromJson(e)).toList() as M;
    }
    if (<GetH5PreBetOrderlistEntity>[] is M) {
      return data.map<GetH5PreBetOrderlistEntity>((Map<String, dynamic> e) =>
          GetH5PreBetOrderlistEntity.fromJson(e)).toList() as M;
    }
    if (<GetH5PreBetOrderlistData>[] is M) {
      return data.map<GetH5PreBetOrderlistData>((Map<String, dynamic> e) =>
          GetH5PreBetOrderlistData.fromJson(e)).toList() as M;
    }
    if (<GetH5PreBetOrderlistDataRecordx>[] is M) {
      return data.map<GetH5PreBetOrderlistDataRecordx>((
          Map<String, dynamic> e) =>
          GetH5PreBetOrderlistDataRecordx.fromJson(e)).toList() as M;
    }
    if (<GetH5PreBetOrderlistDataRecordxData>[] is M) {
      return data.map<GetH5PreBetOrderlistDataRecordxData>((
          Map<String, dynamic> e) =>
          GetH5PreBetOrderlistDataRecordxData.fromJson(e)).toList() as M;
    }
    if (<GetH5PreBetOrderlistDataRecordxDataDetailList>[] is M) {
      return data.map<GetH5PreBetOrderlistDataRecordxDataDetailList>((
          Map<String, dynamic> e) =>
          GetH5PreBetOrderlistDataRecordxDataDetailList.fromJson(e))
          .toList() as M;
    }
    if (<GetMatchResultEntity>[] is M) {
      return data.map<GetMatchResultEntity>((Map<String, dynamic> e) =>
          GetMatchResultEntity.fromJson(e)).toList() as M;
    }
    if (<GetMatchResultData>[] is M) {
      return data.map<GetMatchResultData>((Map<String, dynamic> e) =>
          GetMatchResultData.fromJson(e)).toList() as M;
    }
    if (<GetMatchResultDataHl>[] is M) {
      return data.map<GetMatchResultDataHl>((Map<String, dynamic> e) =>
          GetMatchResultDataHl.fromJson(e)).toList() as M;
    }
    if (<GetMatchResultDataHlOl>[] is M) {
      return data.map<GetMatchResultDataHlOl>((Map<String, dynamic> e) =>
          GetMatchResultDataHlOl.fromJson(e)).toList() as M;
    }
    if (<GetMatchResultDataTitle>[] is M) {
      return data.map<GetMatchResultDataTitle>((Map<String, dynamic> e) =>
          GetMatchResultDataTitle.fromJson(e)).toList() as M;
    }
    if (<GetResultMatchDetailEntity>[] is M) {
      return data.map<GetResultMatchDetailEntity>((Map<String, dynamic> e) =>
          GetResultMatchDetailEntity.fromJson(e)).toList() as M;
    }
    if (<GetResultMatchDetailData>[] is M) {
      return data.map<GetResultMatchDetailData>((Map<String, dynamic> e) =>
          GetResultMatchDetailData.fromJson(e)).toList() as M;
    }
    if (<GetUserCustomizeInfoEntity>[] is M) {
      return data.map<GetUserCustomizeInfoEntity>((Map<String, dynamic> e) =>
          GetUserCustomizeInfoEntity.fromJson(e)).toList() as M;
    }
    if (<GetUserCustomizeInfoData>[] is M) {
      return data.map<GetUserCustomizeInfoData>((Map<String, dynamic> e) =>
          GetUserCustomizeInfoData.fromJson(e)).toList() as M;
    }
    if (<GroupSoureModelEntity>[] is M) {
      return data.map<GroupSoureModelEntity>((Map<String, dynamic> e) =>
          GroupSoureModelEntity.fromJson(e)).toList() as M;
    }
    if (<GroupSoureModelData>[] is M) {
      return data.map<GroupSoureModelData>((Map<String, dynamic> e) =>
          GroupSoureModelData.fromJson(e)).toList() as M;
    }
    if (<GroupSoureModelDataGroupData>[] is M) {
      return data.map<GroupSoureModelDataGroupData>((Map<String, dynamic> e) =>
          GroupSoureModelDataGroupData.fromJson(e)).toList() as M;
    }
    if (<GroupSoureModelDataGroupDataSVirtualSportXZTeamRankingDetailPOList>[
    ] is M) {
      return data.map<
          GroupSoureModelDataGroupDataSVirtualSportXZTeamRankingDetailPOList>((
          Map<String, dynamic> e) =>
          GroupSoureModelDataGroupDataSVirtualSportXZTeamRankingDetailPOList
              .fromJson(e)).toList() as M;
    }
    if (<ItemDisuseEntity>[] is M) {
      return data.map<ItemDisuseEntity>((Map<String, dynamic> e) =>
          ItemDisuseEntity.fromJson(e)).toList() as M;
    }
    if (<LastMarketEntity>[] is M) {
      return data.map<LastMarketEntity>((Map<String, dynamic> e) =>
          LastMarketEntity.fromJson(e)).toList() as M;
    }
    if (<LastMarketCurrentMarket>[] is M) {
      return data.map<LastMarketCurrentMarket>((Map<String, dynamic> e) =>
          LastMarketCurrentMarket.fromJson(e)).toList() as M;
    }
    if (<LastMarketCurrentMarketMarketOddsList>[] is M) {
      return data.map<LastMarketCurrentMarketMarketOddsList>((
          Map<String, dynamic> e) =>
          LastMarketCurrentMarketMarketOddsList.fromJson(e)).toList() as M;
    }
    if (<LastMarketMarketList>[] is M) {
      return data.map<LastMarketMarketList>((Map<String, dynamic> e) =>
          LastMarketMarketList.fromJson(e)).toList() as M;
    }
    if (<LastMarketMarketListMarketOddsList>[] is M) {
      return data.map<LastMarketMarketListMarketOddsList>((
          Map<String, dynamic> e) =>
          LastMarketMarketListMarketOddsList.fromJson(e)).toList() as M;
    }
    if (<LiveVideoUrlEntity>[] is M) {
      return data.map<LiveVideoUrlEntity>((Map<String, dynamic> e) =>
          LiveVideoUrlEntity.fromJson(e)).toList() as M;
    }
    if (<LoginPandaEntity>[] is M) {
      return data.map<LoginPandaEntity>((Map<String, dynamic> e) =>
          LoginPandaEntity.fromJson(e)).toList() as M;
    }
    if (<LoginPandaData>[] is M) {
      return data.map<LoginPandaData>((Map<String, dynamic> e) =>
          LoginPandaData.fromJson(e)).toList() as M;
    }
    if (<MacthDetailsNewsNewEntity>[] is M) {
      return data.map<MacthDetailsNewsNewEntity>((Map<String, dynamic> e) =>
          MacthDetailsNewsNewEntity.fromJson(e)).toList() as M;
    }
    if (<MacthDetailsNewsNewData>[] is M) {
      return data.map<MacthDetailsNewsNewData>((Map<String, dynamic> e) =>
          MacthDetailsNewsNewData.fromJson(e)).toList() as M;
    }
    if (<MatchDetailEntity>[] is M) {
      return data.map<MatchDetailEntity>((Map<String, dynamic> e) =>
          MatchDetailEntity.fromJson(e)).toList() as M;
    }
    if (<MatchDetailData>[] is M) {
      return data.map<MatchDetailData>((Map<String, dynamic> e) =>
          MatchDetailData.fromJson(e)).toList() as M;
    }
    if (<MatchDetailsHistoryEntity>[] is M) {
      return data.map<MatchDetailsHistoryEntity>((Map<String, dynamic> e) =>
          MatchDetailsHistoryEntity.fromJson(e)).toList() as M;
    }
    if (<MatchDetailsHistoryData>[] is M) {
      return data.map<MatchDetailsHistoryData>((Map<String, dynamic> e) =>
          MatchDetailsHistoryData.fromJson(e)).toList() as M;
    }
    if (<MatchDetailsLeaguePointsEntity>[] is M) {
      return data.map<MatchDetailsLeaguePointsEntity>((
          Map<String, dynamic> e) => MatchDetailsLeaguePointsEntity.fromJson(e))
          .toList() as M;
    }
    if (<MatchDetailsLeaguePointsData>[] is M) {
      return data.map<MatchDetailsLeaguePointsData>((Map<String, dynamic> e) =>
          MatchDetailsLeaguePointsData.fromJson(e)).toList() as M;
    }
    if (<MatchDetailsNewsEntity>[] is M) {
      return data.map<MatchDetailsNewsEntity>((Map<String, dynamic> e) =>
          MatchDetailsNewsEntity.fromJson(e)).toList() as M;
    }
    if (<MatchDetailsNewsData>[] is M) {
      return data.map<MatchDetailsNewsData>((Map<String, dynamic> e) =>
          MatchDetailsNewsData.fromJson(e)).toList() as M;
    }
    if (<MatchDetailsRecentEntity>[] is M) {
      return data.map<MatchDetailsRecentEntity>((Map<String, dynamic> e) =>
          MatchDetailsRecentEntity.fromJson(e)).toList() as M;
    }
    if (<MatchDetailsRecentData>[] is M) {
      return data.map<MatchDetailsRecentData>((Map<String, dynamic> e) =>
          MatchDetailsRecentData.fromJson(e)).toList() as M;
    }
    if (<MatchDiskSurfaceEntity>[] is M) {
      return data.map<MatchDiskSurfaceEntity>((Map<String, dynamic> e) =>
          MatchDiskSurfaceEntity.fromJson(e)).toList() as M;
    }
    if (<MatchDiskSurfaceData>[] is M) {
      return data.map<MatchDiskSurfaceData>((Map<String, dynamic> e) =>
          MatchDiskSurfaceData.fromJson(e)).toList() as M;
    }
    if (<MatchDiskSurfaceDataInParam>[] is M) {
      return data.map<MatchDiskSurfaceDataInParam>((Map<String, dynamic> e) =>
          MatchDiskSurfaceDataInParam.fromJson(e)).toList() as M;
    }
    if (<MatchDiskSurfaceDataMatchHistoryBattleDTOMap>[] is M) {
      return data.map<MatchDiskSurfaceDataMatchHistoryBattleDTOMap>((
          Map<String, dynamic> e) =>
          MatchDiskSurfaceDataMatchHistoryBattleDTOMap.fromJson(e))
          .toList() as M;
    }
    if (<MatchDiskSurfaceDataMatchHistoryBattleDTOMap1>[] is M) {
      return data.map<MatchDiskSurfaceDataMatchHistoryBattleDTOMap1>((
          Map<String, dynamic> e) =>
          MatchDiskSurfaceDataMatchHistoryBattleDTOMap1.fromJson(e))
          .toList() as M;
    }
    if (<
        MatchDiskSurfaceDataMatchHistoryBattleDTOMap1MatchHistoryBattleDetailDTOList>[
    ] is M) {
      return data.map<
          MatchDiskSurfaceDataMatchHistoryBattleDTOMap1MatchHistoryBattleDetailDTOList>((
          Map<String, dynamic> e) =>
          MatchDiskSurfaceDataMatchHistoryBattleDTOMap1MatchHistoryBattleDetailDTOList
              .fromJson(e)).toList() as M;
    }
    if (<MatchDiskSurfaceDataMatchHistoryBattleDTOMap2>[] is M) {
      return data.map<MatchDiskSurfaceDataMatchHistoryBattleDTOMap2>((
          Map<String, dynamic> e) =>
          MatchDiskSurfaceDataMatchHistoryBattleDTOMap2.fromJson(e))
          .toList() as M;
    }
    if (<
        MatchDiskSurfaceDataMatchHistoryBattleDTOMap2MatchHistoryBattleDetailDTOList>[
    ] is M) {
      return data.map<
          MatchDiskSurfaceDataMatchHistoryBattleDTOMap2MatchHistoryBattleDetailDTOList>((
          Map<String, dynamic> e) =>
          MatchDiskSurfaceDataMatchHistoryBattleDTOMap2MatchHistoryBattleDetailDTOList
              .fromJson(e)).toList() as M;
    }
    if (<MatchEntity>[] is M) {
      return data.map<MatchEntity>((Map<String, dynamic> e) =>
          MatchEntity.fromJson(e)).toList() as M;
    }
    if (<MatchHps>[] is M) {
      return data.map<MatchHps>((Map<String, dynamic> e) =>
          MatchHps.fromJson(e)).toList() as M;
    }
    if (<MatchHpsHl>[] is M) {
      return data.map<MatchHpsHl>((Map<String, dynamic> e) =>
          MatchHpsHl.fromJson(e)).toList() as M;
    }
    if (<MatchHpsHlOl>[] is M) {
      return data.map<MatchHpsHlOl>((Map<String, dynamic> e) =>
          MatchHpsHlOl.fromJson(e)).toList() as M;
    }
    if (<MatchHpsTitle>[] is M) {
      return data.map<MatchHpsTitle>((Map<String, dynamic> e) =>
          MatchHpsTitle.fromJson(e)).toList() as M;
    }
    if (<MatchInfo>[] is M) {
      return data.map<MatchInfo>((Map<String, dynamic> e) =>
          MatchInfo.fromJson(e)).toList() as M;
    }
    if (<MatchCd>[] is M) {
      return data.map<MatchCd>((Map<String, dynamic> e) => MatchCd.fromJson(e))
          .toList() as M;
    }
    if (<MatchCdVdo>[] is M) {
      return data.map<MatchCdVdo>((Map<String, dynamic> e) =>
          MatchCdVdo.fromJson(e)).toList() as M;
    }
    if (<MatchCdHls>[] is M) {
      return data.map<MatchCdHls>((Map<String, dynamic> e) =>
          MatchCdHls.fromJson(e)).toList() as M;
    }
    if (<MatchCdHlsOl>[] is M) {
      return data.map<MatchCdHlsOl>((Map<String, dynamic> e) =>
          MatchCdHlsOl.fromJson(e)).toList() as M;
    }
    if (<MatchIntelligenceEntity>[] is M) {
      return data.map<MatchIntelligenceEntity>((Map<String, dynamic> e) =>
          MatchIntelligenceEntity.fromJson(e)).toList() as M;
    }
    if (<MatchIntelligenceData>[] is M) {
      return data.map<MatchIntelligenceData>((Map<String, dynamic> e) =>
          MatchIntelligenceData.fromJson(e)).toList() as M;
    }
    if (<MatchIntelligenceDataInParam>[] is M) {
      return data.map<MatchIntelligenceDataInParam>((Map<String, dynamic> e) =>
          MatchIntelligenceDataInParam.fromJson(e)).toList() as M;
    }
    if (<MatchIntelligenceDataSThirdMatchInformationDTOList>[] is M) {
      return data.map<MatchIntelligenceDataSThirdMatchInformationDTOList>((
          Map<String, dynamic> e) =>
          MatchIntelligenceDataSThirdMatchInformationDTOList.fromJson(e))
          .toList() as M;
    }
    if (<MatchLineupEntity>[] is M) {
      return data.map<MatchLineupEntity>((Map<String, dynamic> e) =>
          MatchLineupEntity.fromJson(e)).toList() as M;
    }
    if (<MatchLineupData>[] is M) {
      return data.map<MatchLineupData>((Map<String, dynamic> e) =>
          MatchLineupData.fromJson(e)).toList() as M;
    }
    if (<MatchLineupDataUp>[] is M) {
      return data.map<MatchLineupDataUp>((Map<String, dynamic> e) =>
          MatchLineupDataUp.fromJson(e)).toList() as M;
    }
    if (<MatchLineupDataDown>[] is M) {
      return data.map<MatchLineupDataDown>((Map<String, dynamic> e) =>
          MatchLineupDataDown.fromJson(e)).toList() as M;
    }
    if (<MatchTechnologyEntity>[] is M) {
      return data.map<MatchTechnologyEntity>((Map<String, dynamic> e) =>
          MatchTechnologyEntity.fromJson(e)).toList() as M;
    }
    if (<MatchTechnologyData>[] is M) {
      return data.map<MatchTechnologyData>((Map<String, dynamic> e) =>
          MatchTechnologyData.fromJson(e)).toList() as M;
    }
    if (<MatchTechnologyDataInParam>[] is M) {
      return data.map<MatchTechnologyDataInParam>((Map<String, dynamic> e) =>
          MatchTechnologyDataInParam.fromJson(e)).toList() as M;
    }
    if (<MatchTechnologyDataHomeAwayGoalAndCoachMap>[] is M) {
      return data.map<MatchTechnologyDataHomeAwayGoalAndCoachMap>((
          Map<String, dynamic> e) =>
          MatchTechnologyDataHomeAwayGoalAndCoachMap.fromJson(e)).toList() as M;
    }
    if (<MatchTechnologyDataHomeAwayGoalAndCoachMapHomeGoalMap>[] is M) {
      return data.map<MatchTechnologyDataHomeAwayGoalAndCoachMapHomeGoalMap>((
          Map<String, dynamic> e) =>
          MatchTechnologyDataHomeAwayGoalAndCoachMapHomeGoalMap.fromJson(e))
          .toList() as M;
    }
    if (<MatchTechnologyDataHomeAwayGoalAndCoachMapSThirdMatchCoachDTOMap>[
    ] is M) {
      return data.map<
          MatchTechnologyDataHomeAwayGoalAndCoachMapSThirdMatchCoachDTOMap>((
          Map<String, dynamic> e) =>
          MatchTechnologyDataHomeAwayGoalAndCoachMapSThirdMatchCoachDTOMap
              .fromJson(e)).toList() as M;
    }
    if (<MatchTechnologyDataHomeAwayGoalAndCoachMapSThirdMatchCoachDTOMap1>[
    ] is M) {
      return data.map<
          MatchTechnologyDataHomeAwayGoalAndCoachMapSThirdMatchCoachDTOMap1>((
          Map<String, dynamic> e) =>
          MatchTechnologyDataHomeAwayGoalAndCoachMapSThirdMatchCoachDTOMap1
              .fromJson(e)).toList() as M;
    }
    if (<MatchTechnologyDataHomeAwayGoalAndCoachMapSThirdMatchCoachDTOMap2>[
    ] is M) {
      return data.map<
          MatchTechnologyDataHomeAwayGoalAndCoachMapSThirdMatchCoachDTOMap2>((
          Map<String, dynamic> e) =>
          MatchTechnologyDataHomeAwayGoalAndCoachMapSThirdMatchCoachDTOMap2
              .fromJson(e)).toList() as M;
    }
    if (<MatchTechnologyDataHomeAwayGoalAndCoachMapAwayGoalMap>[] is M) {
      return data.map<MatchTechnologyDataHomeAwayGoalAndCoachMapAwayGoalMap>((
          Map<String, dynamic> e) =>
          MatchTechnologyDataHomeAwayGoalAndCoachMapAwayGoalMap.fromJson(e))
          .toList() as M;
    }
    if (<MatcheHandpickEntity>[] is M) {
      return data.map<MatcheHandpickEntity>((Map<String, dynamic> e) =>
          MatcheHandpickEntity.fromJson(e)).toList() as M;
    }
    if (<MatcheHandpickData>[] is M) {
      return data.map<MatcheHandpickData>((Map<String, dynamic> e) =>
          MatcheHandpickData.fromJson(e)).toList() as M;
    }
    if (<MatcheHandpickDataHps>[] is M) {
      return data.map<MatcheHandpickDataHps>((Map<String, dynamic> e) =>
          MatcheHandpickDataHps.fromJson(e)).toList() as M;
    }
    if (<MatcheHandpickDataHpsHl>[] is M) {
      return data.map<MatcheHandpickDataHpsHl>((Map<String, dynamic> e) =>
          MatcheHandpickDataHpsHl.fromJson(e)).toList() as M;
    }
    if (<MatcheHandpickDataHpsHlOl>[] is M) {
      return data.map<MatcheHandpickDataHpsHlOl>((Map<String, dynamic> e) =>
          MatcheHandpickDataHpsHlOl.fromJson(e)).toList() as M;
    }
    if (<MatcheResultEntity>[] is M) {
      return data.map<MatcheResultEntity>((Map<String, dynamic> e) =>
          MatcheResultEntity.fromJson(e)).toList() as M;
    }
    if (<MatcheResultData>[] is M) {
      return data.map<MatcheResultData>((Map<String, dynamic> e) =>
          MatcheResultData.fromJson(e)).toList() as M;
    }
    if (<MchampionMatchResultEntity>[] is M) {
      return data.map<MchampionMatchResultEntity>((Map<String, dynamic> e) =>
          MchampionMatchResultEntity.fromJson(e)).toList() as M;
    }
    if (<MchampionMatchResultData>[] is M) {
      return data.map<MchampionMatchResultData>((Map<String, dynamic> e) =>
          MchampionMatchResultData.fromJson(e)).toList() as M;
    }
    if (<MenuCountInfoEntity>[] is M) {
      return data.map<MenuCountInfoEntity>((Map<String, dynamic> e) =>
          MenuCountInfoEntity.fromJson(e)).toList() as M;
    }
    if (<MenuEntity>[] is M) {
      return data.map<MenuEntity>((Map<String, dynamic> e) =>
          MenuEntity.fromJson(e)).toList() as M;
    }
    if (<NoticeCenterEntity>[] is M) {
      return data.map<NoticeCenterEntity>((Map<String, dynamic> e) =>
          NoticeCenterEntity.fromJson(e)).toList() as M;
    }
    if (<NoticeCenterNb>[] is M) {
      return data.map<NoticeCenterNb>((Map<String, dynamic> e) =>
          NoticeCenterNb.fromJson(e)).toList() as M;
    }
    if (<NoticeCenterNt>[] is M) {
      return data.map<NoticeCenterNt>((Map<String, dynamic> e) =>
          NoticeCenterNt.fromJson(e)).toList() as M;
    }
    if (<NoticeCenterNl>[] is M) {
      return data.map<NoticeCenterNl>((Map<String, dynamic> e) =>
          NoticeCenterNl.fromJson(e)).toList() as M;
    }
    if (<NoticeCenterNlMtl>[] is M) {
      return data.map<NoticeCenterNlMtl>((Map<String, dynamic> e) =>
          NoticeCenterNlMtl.fromJson(e)).toList() as M;
    }
    if (<OrderPreSettleEntity>[] is M) {
      return data.map<OrderPreSettleEntity>((Map<String, dynamic> e) =>
          OrderPreSettleEntity.fromJson(e)).toList() as M;
    }
    if (<OriginDataEntity>[] is M) {
      return data.map<OriginDataEntity>((Map<String, dynamic> e) =>
          OriginDataEntity.fromJson(e)).toList() as M;
    }
    if (<PlaybackVideoUrlEntity>[] is M) {
      return data.map<PlaybackVideoUrlEntity>((Map<String, dynamic> e) =>
          PlaybackVideoUrlEntity.fromJson(e)).toList() as M;
    }
    if (<PlaybackVideoUrlData>[] is M) {
      return data.map<PlaybackVideoUrlData>((Map<String, dynamic> e) =>
          PlaybackVideoUrlData.fromJson(e)).toList() as M;
    }
    if (<PlaybackVideoUrlDataEventList>[] is M) {
      return data.map<PlaybackVideoUrlDataEventList>((Map<String, dynamic> e) =>
          PlaybackVideoUrlDataEventList.fromJson(e)).toList() as M;
    }
    if (<SaveUserCustomizeInfoEntity>[] is M) {
      return data.map<SaveUserCustomizeInfoEntity>((Map<String, dynamic> e) =>
          SaveUserCustomizeInfoEntity.fromJson(e)).toList() as M;
    }
    if (<SetUserLanguageEntity>[] is M) {
      return data.map<SetUserLanguageEntity>((Map<String, dynamic> e) =>
          SetUserLanguageEntity.fromJson(e)).toList() as M;
    }
    if (<SetUserLanguageData>[] is M) {
      return data.map<SetUserLanguageData>((Map<String, dynamic> e) =>
          SetUserLanguageData.fromJson(e)).toList() as M;
    }
    if (<SportConfigInfo>[] is M) {
      return data.map<SportConfigInfo>((Map<String, dynamic> e) =>
          SportConfigInfo.fromJson(e)).toList() as M;
    }
    if (<SportEntity>[] is M) {
      return data.map<SportEntity>((Map<String, dynamic> e) =>
          SportEntity.fromJson(e)).toList() as M;
    }
    if (<TeamEntity>[] is M) {
      return data.map<TeamEntity>((Map<String, dynamic> e) =>
          TeamEntity.fromJson(e)).toList() as M;
    }
    if (<TestInfo>[] is M) {
      return data.map<TestInfo>((Map<String, dynamic> e) =>
          TestInfo.fromJson(e)).toList() as M;
    }
    if (<UpdatePreBetOddsEntity>[] is M) {
      return data.map<UpdatePreBetOddsEntity>((Map<String, dynamic> e) =>
          UpdatePreBetOddsEntity.fromJson(e)).toList() as M;
    }
    if (<UserInfo>[] is M) {
      return data.map<UserInfo>((Map<String, dynamic> e) =>
          UserInfo.fromJson(e)).toList() as M;
    }
    if (<UserInfoActivityList>[] is M) {
      return data.map<UserInfoActivityList>((Map<String, dynamic> e) =>
          UserInfoActivityList.fromJson(e)).toList() as M;
    }
    if (<UserInfoConfigVO>[] is M) {
      return data.map<UserInfoConfigVO>((Map<String, dynamic> e) =>
          UserInfoConfigVO.fromJson(e)).toList() as M;
    }
    if (<UserInfoConfigVOTitleMap>[] is M) {
      return data.map<UserInfoConfigVOTitleMap>((Map<String, dynamic> e) =>
          UserInfoConfigVOTitleMap.fromJson(e)).toList() as M;
    }
    if (<UserInfoCvo>[] is M) {
      return data.map<UserInfoCvo>((Map<String, dynamic> e) =>
          UserInfoCvo.fromJson(e)).toList() as M;
    }
    if (<UserInfoCvoSeries>[] is M) {
      return data.map<UserInfoCvoSeries>((Map<String, dynamic> e) =>
          UserInfoCvoSeries.fromJson(e)).toList() as M;
    }
    if (<UserInfoCvoSingle>[] is M) {
      return data.map<UserInfoCvoSingle>((Map<String, dynamic> e) =>
          UserInfoCvoSingle.fromJson(e)).toList() as M;
    }
    if (<UserInfoMerchantEventSwitchVO>[] is M) {
      return data.map<UserInfoMerchantEventSwitchVO>((Map<String, dynamic> e) =>
          UserInfoMerchantEventSwitchVO.fromJson(e)).toList() as M;
    }
    if (<UserInfoOss>[] is M) {
      return data.map<UserInfoOss>((Map<String, dynamic> e) =>
          UserInfoOss.fromJson(e)).toList() as M;
    }
    if (<UserInfoPca>[] is M) {
      return data.map<UserInfoPca>((Map<String, dynamic> e) =>
          UserInfoPca.fromJson(e)).toList() as M;
    }
    if (<UserInfoVideoManageVo>[] is M) {
      return data.map<UserInfoVideoManageVo>((Map<String, dynamic> e) =>
          UserInfoVideoManageVo.fromJson(e)).toList() as M;
    }
    if (<UserInfoSettleSwitchVO>[] is M) {
      return data.map<UserInfoSettleSwitchVO>((Map<String, dynamic> e) =>
          UserInfoSettleSwitchVO.fromJson(e)).toList() as M;
    }
    if (<UserPersonaliseEntity>[] is M) {
      return data.map<UserPersonaliseEntity>((Map<String, dynamic> e) =>
          UserPersonaliseEntity.fromJson(e)).toList() as M;
    }
    if (<VideoAnimationUrlEntity>[] is M) {
      return data.map<VideoAnimationUrlEntity>((Map<String, dynamic> e) =>
          VideoAnimationUrlEntity.fromJson(e)).toList() as M;
    }
    if (<VideoAnimationUrlAnimation3Url>[] is M) {
      return data.map<VideoAnimationUrlAnimation3Url>((
          Map<String, dynamic> e) => VideoAnimationUrlAnimation3Url.fromJson(e))
          .toList() as M;
    }
    if (<VrHistoryDogEntity>[] is M) {
      return data.map<VrHistoryDogEntity>((Map<String, dynamic> e) =>
          VrHistoryDogEntity.fromJson(e)).toList() as M;
    }
    if (<VrHotEntity>[] is M) {
      return data.map<VrHotEntity>((Map<String, dynamic> e) =>
          VrHotEntity.fromJson(e)).toList() as M;
    }
    if (<VrHotTeam>[] is M) {
      return data.map<VrHotTeam>((Map<String, dynamic> e) =>
          VrHotTeam.fromJson(e)).toList() as M;
    }
    if (<VrMatchEntity>[] is M) {
      return data.map<VrMatchEntity>((Map<String, dynamic> e) =>
          VrMatchEntity.fromJson(e)).toList() as M;
    }
    if (<VrRankingEntity>[] is M) {
      return data.map<VrRankingEntity>((Map<String, dynamic> e) =>
          VrRankingEntity.fromJson(e)).toList() as M;
    }
    if (<VrSportReplayEntity>[] is M) {
      return data.map<VrSportReplayEntity>((Map<String, dynamic> e) =>
          VrSportReplayEntity.fromJson(e)).toList() as M;
    }
    if (<VrSportReplayDetailValue>[] is M) {
      return data.map<VrSportReplayDetailValue>((Map<String, dynamic> e) =>
          VrSportReplayDetailValue.fromJson(e)).toList() as M;
    }
    if (<VrSportReplayDetailScoreRanking>[] is M) {
      return data.map<VrSportReplayDetailScoreRanking>((
          Map<String, dynamic> e) =>
          VrSportReplayDetailScoreRanking.fromJson(e)).toList() as M;
    }
    if (<VrSportsMenuEntity>[] is M) {
      return data.map<VrSportsMenuEntity>((Map<String, dynamic> e) =>
          VrSportsMenuEntity.fromJson(e)).toList() as M;
    }
    if (<CollectionReq>[] is M) {
      return data.map<CollectionReq>((Map<String, dynamic> e) =>
          CollectionReq.fromJson(e)).toList() as M;
    }

    debugPrint("$M not found");

    return null;
  }

  static M? fromJsonAsT<M>(dynamic json) {
    if (json is M) {
      return json;
    }
    if (json is List) {
      return _getListChildType<M>(
          json.map((dynamic e) => e as Map<String, dynamic>).toList());
    } else {
      return jsonConvert.convert<M>(json);
    }
  }
}

class JsonConvertClassCollection {
  Map<String, JsonConvertFunction> convertFuncMap = {
    (AnalyzeVSInfoEntity).toString(): AnalyzeVSInfoEntity.fromJson,
    (BetAmountReq).toString(): BetAmountReq.fromJson,
    (BetAmountReqOrderMaxBetMoney).toString(): BetAmountReqOrderMaxBetMoney
        .fromJson,
    (BetReq).toString(): BetReq.fromJson,
    (BetReqSeriesOrders).toString(): BetReqSeriesOrders.fromJson,
    (BetReqSeriesOrdersOrderDetailList)
        .toString(): BetReqSeriesOrdersOrderDetailList.fromJson,
    (LatestMarketReq).toString(): LatestMarketReq.fromJson,
    (LatestMarketReqIdList).toString(): LatestMarketReqIdList.fromJson,
    (AccessConfig).toString(): AccessConfig.fromJson,
    (AccountInfo).toString(): AccountInfo.fromJson,
    (AnalyzeBackVideoInfoEntityEntityEntityEntity)
        .toString(): AnalyzeBackVideoInfoEntityEntityEntityEntity.fromJson,
    (AnalyzeBackVideoInfoEntityEntityEntityEventList)
        .toString(): AnalyzeBackVideoInfoEntityEntityEntityEventList.fromJson,
    (AnalyzeGetMatchAnalysiseDataEntity)
        .toString(): AnalyzeGetMatchAnalysiseDataEntity.fromJson,
    (AnalyzeGetMatchAnalysiseDataInParam)
        .toString(): AnalyzeGetMatchAnalysiseDataInParam.fromJson,
    (AnalyzeGetMatchAnalysiseDataMatchHistoryBattleDTOMap)
        .toString(): AnalyzeGetMatchAnalysiseDataMatchHistoryBattleDTOMap
        .fromJson,
    (AnalyzeGetMatchAnalysiseDataMatchHistoryBattleDTOMap1)
        .toString(): AnalyzeGetMatchAnalysiseDataMatchHistoryBattleDTOMap1
        .fromJson,
    (AnalyzeGetMatchAnalysiseDataMatchHistoryBattleDTOMap1MatchHistoryBattleDetailDTOList)
        .toString(): AnalyzeGetMatchAnalysiseDataMatchHistoryBattleDTOMap1MatchHistoryBattleDetailDTOList
        .fromJson,
    (AnalyzeGetMatchAnalysiseDataMatchHistoryBattleDTOMap2)
        .toString(): AnalyzeGetMatchAnalysiseDataMatchHistoryBattleDTOMap2
        .fromJson,
    (AnalyzeGetMatchAnalysiseDataMatchHistoryBattleDTOMap2MatchHistoryBattleDetailDTOList)
        .toString(): AnalyzeGetMatchAnalysiseDataMatchHistoryBattleDTOMap2MatchHistoryBattleDetailDTOList
        .fromJson,
    (AnalyzeGetMatchAnalysiseDataItemEntity)
        .toString(): AnalyzeGetMatchAnalysiseDataItemEntity.fromJson,
    (AnalyzeGetMatchAnalysiseDataItemInParam)
        .toString(): AnalyzeGetMatchAnalysiseDataItemInParam.fromJson,
    (AnalyzeGetMatchAnalysiseDataItemBasicInfoMap)
        .toString(): AnalyzeGetMatchAnalysiseDataItemBasicInfoMap.fromJson,
    (AnalyzeGetMatchAnalysiseDataItemBasicInfoMapSThirdMatchSidelinedDTOMap)
        .toString(): AnalyzeGetMatchAnalysiseDataItemBasicInfoMapSThirdMatchSidelinedDTOMap
        .fromJson,
    (AnalyzeGetMatchAnalysiseDataItemBasicInfoMapSThirdMatchFutureStatisticsDTOMap)
        .toString(): AnalyzeGetMatchAnalysiseDataItemBasicInfoMapSThirdMatchFutureStatisticsDTOMap
        .fromJson,
    (AnalyzeGetMatchAnalysiseDataItemBasicInfoMapSThirdMatchFutureStatisticsDTOMap1)
        .toString(): AnalyzeGetMatchAnalysiseDataItemBasicInfoMapSThirdMatchFutureStatisticsDTOMap1
        .fromJson,
    (AnalyzeGetMatchAnalysiseDataItemBasicInfoMapSThirdMatchFutureStatisticsDTOMap2)
        .toString(): AnalyzeGetMatchAnalysiseDataItemBasicInfoMapSThirdMatchFutureStatisticsDTOMap2
        .fromJson,
    (AnalyzeTeamVsHistoryEntity).toString(): AnalyzeTeamVsHistoryEntity
        .fromJson,
    (AnalyzeTeamVsOtherTeamItemEntityEntity)
        .toString(): AnalyzeTeamVsOtherTeamItemEntityEntity.fromJson,
    (BalanceEntity).toString(): BalanceEntity.fromJson,
    (BetAmountEntity).toString(): BetAmountEntity.fromJson,
    (BetAmountBetAmountInfo).toString(): BetAmountBetAmountInfo.fromJson,
    (BetResultEntity).toString(): BetResultEntity.fromJson,
    (BetResultOrderDetailRespList).toString(): BetResultOrderDetailRespList
        .fromJson,
    (BetResultSeriesOrderRespList).toString(): BetResultSeriesOrderRespList
        .fromJson,
    (CancelPreBetOrderEntity).toString(): CancelPreBetOrderEntity.fromJson,
    (CategoryListEntity).toString(): CategoryListEntity.fromJson,
    (CategoryListData).toString(): CategoryListData.fromJson,
    (ChampionMatchResultEntity).toString(): ChampionMatchResultEntity.fromJson,
    (ChampionMatchResultData).toString(): ChampionMatchResultData.fromJson,
    (CollectionCountInfo).toString(): CollectionCountInfo.fromJson,
    (CollectionInfo).toString(): CollectionInfo.fromJson,
    (CollectionInfoExclude).toString(): CollectionInfoExclude.fromJson,
    (CommonScoreModelEntity).toString(): CommonScoreModelEntity.fromJson,
    (CommonScoreModelData).toString(): CommonScoreModelData.fromJson,
    (DetailVideoEntity).toString(): DetailVideoEntity.fromJson,
    (DjDateEntityEntity).toString(): DjDateEntityEntity.fromJson,
    (DjListEntity).toString(): DjListEntity.fromJson,
    (DjListHps).toString(): DjListHps.fromJson,
    (DjListHpsHl).toString(): DjListHpsHl.fromJson,
    (DjListHpsHlOl).toString(): DjListHpsHlOl.fromJson,
    (EventInfo2Entity).toString(): EventInfo2Entity.fromJson,
    (EventInfo2Data).toString(): EventInfo2Data.fromJson,
    (GetCashoutMaxAmountListEntity).toString(): GetCashoutMaxAmountListEntity
        .fromJson,
    (GetCashoutMaxAmountListData).toString(): GetCashoutMaxAmountListData
        .fromJson,
    (GetFilterMatchListNewEntity).toString(): GetFilterMatchListNewEntity
        .fromJson,
    (GetFilterMatchListNewData).toString(): GetFilterMatchListNewData.fromJson,
    (GetH5OrderListEntity).toString(): GetH5OrderListEntity.fromJson,
    (GetH5OrderListData).toString(): GetH5OrderListData.fromJson,
    (GetH5OrderListDataRecordx).toString(): GetH5OrderListDataRecordx.fromJson,
    (GetH5OrderListDataRecordxData).toString(): GetH5OrderListDataRecordxData
        .fromJson,
    (GetH5OrderListDataRecordxDataDetailList)
        .toString(): GetH5OrderListDataRecordxDataDetailList.fromJson,
    (GetH5OrderListDataRecordxDataOrderVOS)
        .toString(): GetH5OrderListDataRecordxDataOrderVOS.fromJson,
    (GetH5PreBetOrderlistEntity).toString(): GetH5PreBetOrderlistEntity
        .fromJson,
    (GetH5PreBetOrderlistData).toString(): GetH5PreBetOrderlistData.fromJson,
    (GetH5PreBetOrderlistDataRecordx)
        .toString(): GetH5PreBetOrderlistDataRecordx.fromJson,
    (GetH5PreBetOrderlistDataRecordxData)
        .toString(): GetH5PreBetOrderlistDataRecordxData.fromJson,
    (GetH5PreBetOrderlistDataRecordxDataDetailList)
        .toString(): GetH5PreBetOrderlistDataRecordxDataDetailList.fromJson,
    (GetMatchResultEntity).toString(): GetMatchResultEntity.fromJson,
    (GetMatchResultData).toString(): GetMatchResultData.fromJson,
    (GetMatchResultDataHl).toString(): GetMatchResultDataHl.fromJson,
    (GetMatchResultDataHlOl).toString(): GetMatchResultDataHlOl.fromJson,
    (GetMatchResultDataTitle).toString(): GetMatchResultDataTitle.fromJson,
    (GetResultMatchDetailEntity).toString(): GetResultMatchDetailEntity
        .fromJson,
    (GetResultMatchDetailData).toString(): GetResultMatchDetailData.fromJson,
    (GetUserCustomizeInfoEntity).toString(): GetUserCustomizeInfoEntity
        .fromJson,
    (GetUserCustomizeInfoData).toString(): GetUserCustomizeInfoData.fromJson,
    (GroupSoureModelEntity).toString(): GroupSoureModelEntity.fromJson,
    (GroupSoureModelData).toString(): GroupSoureModelData.fromJson,
    (GroupSoureModelDataGroupData).toString(): GroupSoureModelDataGroupData
        .fromJson,
    (GroupSoureModelDataGroupDataSVirtualSportXZTeamRankingDetailPOList)
        .toString(): GroupSoureModelDataGroupDataSVirtualSportXZTeamRankingDetailPOList
        .fromJson,
    (ItemDisuseEntity).toString(): ItemDisuseEntity.fromJson,
    (LastMarketEntity).toString(): LastMarketEntity.fromJson,
    (LastMarketCurrentMarket).toString(): LastMarketCurrentMarket.fromJson,
    (LastMarketCurrentMarketMarketOddsList)
        .toString(): LastMarketCurrentMarketMarketOddsList.fromJson,
    (LastMarketMarketList).toString(): LastMarketMarketList.fromJson,
    (LastMarketMarketListMarketOddsList)
        .toString(): LastMarketMarketListMarketOddsList.fromJson,
    (LiveVideoUrlEntity).toString(): LiveVideoUrlEntity.fromJson,
    (LoginPandaEntity).toString(): LoginPandaEntity.fromJson,
    (LoginPandaData).toString(): LoginPandaData.fromJson,
    (MacthDetailsNewsNewEntity).toString(): MacthDetailsNewsNewEntity.fromJson,
    (MacthDetailsNewsNewData).toString(): MacthDetailsNewsNewData.fromJson,
    (MatchDetailEntity).toString(): MatchDetailEntity.fromJson,
    (MatchDetailData).toString(): MatchDetailData.fromJson,
    (MatchDetailsHistoryEntity).toString(): MatchDetailsHistoryEntity.fromJson,
    (MatchDetailsHistoryData).toString(): MatchDetailsHistoryData.fromJson,
    (MatchDetailsLeaguePointsEntity).toString(): MatchDetailsLeaguePointsEntity
        .fromJson,
    (MatchDetailsLeaguePointsData).toString(): MatchDetailsLeaguePointsData
        .fromJson,
    (MatchDetailsNewsEntity).toString(): MatchDetailsNewsEntity.fromJson,
    (MatchDetailsNewsData).toString(): MatchDetailsNewsData.fromJson,
    (MatchDetailsRecentEntity).toString(): MatchDetailsRecentEntity.fromJson,
    (MatchDetailsRecentData).toString(): MatchDetailsRecentData.fromJson,
    (MatchDiskSurfaceEntity).toString(): MatchDiskSurfaceEntity.fromJson,
    (MatchDiskSurfaceData).toString(): MatchDiskSurfaceData.fromJson,
    (MatchDiskSurfaceDataInParam).toString(): MatchDiskSurfaceDataInParam
        .fromJson,
    (MatchDiskSurfaceDataMatchHistoryBattleDTOMap)
        .toString(): MatchDiskSurfaceDataMatchHistoryBattleDTOMap.fromJson,
    (MatchDiskSurfaceDataMatchHistoryBattleDTOMap1)
        .toString(): MatchDiskSurfaceDataMatchHistoryBattleDTOMap1.fromJson,
    (MatchDiskSurfaceDataMatchHistoryBattleDTOMap1MatchHistoryBattleDetailDTOList)
        .toString(): MatchDiskSurfaceDataMatchHistoryBattleDTOMap1MatchHistoryBattleDetailDTOList
        .fromJson,
    (MatchDiskSurfaceDataMatchHistoryBattleDTOMap2)
        .toString(): MatchDiskSurfaceDataMatchHistoryBattleDTOMap2.fromJson,
    (MatchDiskSurfaceDataMatchHistoryBattleDTOMap2MatchHistoryBattleDetailDTOList)
        .toString(): MatchDiskSurfaceDataMatchHistoryBattleDTOMap2MatchHistoryBattleDetailDTOList
        .fromJson,
    (MatchEntity).toString(): MatchEntity.fromJson,
    (MatchHps).toString(): MatchHps.fromJson,
    (MatchHpsHl).toString(): MatchHpsHl.fromJson,
    (MatchHpsHlOl).toString(): MatchHpsHlOl.fromJson,
    (MatchHpsTitle).toString(): MatchHpsTitle.fromJson,
    (MatchInfo).toString(): MatchInfo.fromJson,
    (MatchCd).toString(): MatchCd.fromJson,
    (MatchCdVdo).toString(): MatchCdVdo.fromJson,
    (MatchCdHls).toString(): MatchCdHls.fromJson,
    (MatchCdHlsOl).toString(): MatchCdHlsOl.fromJson,
    (MatchIntelligenceEntity).toString(): MatchIntelligenceEntity.fromJson,
    (MatchIntelligenceData).toString(): MatchIntelligenceData.fromJson,
    (MatchIntelligenceDataInParam).toString(): MatchIntelligenceDataInParam
        .fromJson,
    (MatchIntelligenceDataSThirdMatchInformationDTOList)
        .toString(): MatchIntelligenceDataSThirdMatchInformationDTOList
        .fromJson,
    (MatchLineupEntity).toString(): MatchLineupEntity.fromJson,
    (MatchLineupData).toString(): MatchLineupData.fromJson,
    (MatchLineupDataUp).toString(): MatchLineupDataUp.fromJson,
    (MatchLineupDataDown).toString(): MatchLineupDataDown.fromJson,
    (MatchTechnologyEntity).toString(): MatchTechnologyEntity.fromJson,
    (MatchTechnologyData).toString(): MatchTechnologyData.fromJson,
    (MatchTechnologyDataInParam).toString(): MatchTechnologyDataInParam
        .fromJson,
    (MatchTechnologyDataHomeAwayGoalAndCoachMap)
        .toString(): MatchTechnologyDataHomeAwayGoalAndCoachMap.fromJson,
    (MatchTechnologyDataHomeAwayGoalAndCoachMapHomeGoalMap)
        .toString(): MatchTechnologyDataHomeAwayGoalAndCoachMapHomeGoalMap
        .fromJson,
    (MatchTechnologyDataHomeAwayGoalAndCoachMapSThirdMatchCoachDTOMap)
        .toString(): MatchTechnologyDataHomeAwayGoalAndCoachMapSThirdMatchCoachDTOMap
        .fromJson,
    (MatchTechnologyDataHomeAwayGoalAndCoachMapSThirdMatchCoachDTOMap1)
        .toString(): MatchTechnologyDataHomeAwayGoalAndCoachMapSThirdMatchCoachDTOMap1
        .fromJson,
    (MatchTechnologyDataHomeAwayGoalAndCoachMapSThirdMatchCoachDTOMap2)
        .toString(): MatchTechnologyDataHomeAwayGoalAndCoachMapSThirdMatchCoachDTOMap2
        .fromJson,
    (MatchTechnologyDataHomeAwayGoalAndCoachMapAwayGoalMap)
        .toString(): MatchTechnologyDataHomeAwayGoalAndCoachMapAwayGoalMap
        .fromJson,
    (MatcheHandpickEntity).toString(): MatcheHandpickEntity.fromJson,
    (MatcheHandpickData).toString(): MatcheHandpickData.fromJson,
    (MatcheHandpickDataHps).toString(): MatcheHandpickDataHps.fromJson,
    (MatcheHandpickDataHpsHl).toString(): MatcheHandpickDataHpsHl.fromJson,
    (MatcheHandpickDataHpsHlOl).toString(): MatcheHandpickDataHpsHlOl.fromJson,
    (MatcheResultEntity).toString(): MatcheResultEntity.fromJson,
    (MatcheResultData).toString(): MatcheResultData.fromJson,
    (MchampionMatchResultEntity).toString(): MchampionMatchResultEntity
        .fromJson,
    (MchampionMatchResultData).toString(): MchampionMatchResultData.fromJson,
    (MenuCountInfoEntity).toString(): MenuCountInfoEntity.fromJson,
    (MenuEntity).toString(): MenuEntity.fromJson,
    (NoticeCenterEntity).toString(): NoticeCenterEntity.fromJson,
    (NoticeCenterNb).toString(): NoticeCenterNb.fromJson,
    (NoticeCenterNt).toString(): NoticeCenterNt.fromJson,
    (NoticeCenterNl).toString(): NoticeCenterNl.fromJson,
    (NoticeCenterNlMtl).toString(): NoticeCenterNlMtl.fromJson,
    (OrderPreSettleEntity).toString(): OrderPreSettleEntity.fromJson,
    (OriginDataEntity).toString(): OriginDataEntity.fromJson,
    (PlaybackVideoUrlEntity).toString(): PlaybackVideoUrlEntity.fromJson,
    (PlaybackVideoUrlData).toString(): PlaybackVideoUrlData.fromJson,
    (PlaybackVideoUrlDataEventList).toString(): PlaybackVideoUrlDataEventList
        .fromJson,
    (SaveUserCustomizeInfoEntity).toString(): SaveUserCustomizeInfoEntity
        .fromJson,
    (SetUserLanguageEntity).toString(): SetUserLanguageEntity.fromJson,
    (SetUserLanguageData).toString(): SetUserLanguageData.fromJson,
    (SportConfigInfo).toString(): SportConfigInfo.fromJson,
    (SportEntity).toString(): SportEntity.fromJson,
    (TeamEntity).toString(): TeamEntity.fromJson,
    (TestInfo).toString(): TestInfo.fromJson,
    (UpdatePreBetOddsEntity).toString(): UpdatePreBetOddsEntity.fromJson,
    (UserInfo).toString(): UserInfo.fromJson,
    (UserInfoActivityList).toString(): UserInfoActivityList.fromJson,
    (UserInfoConfigVO).toString(): UserInfoConfigVO.fromJson,
    (UserInfoConfigVOTitleMap).toString(): UserInfoConfigVOTitleMap.fromJson,
    (UserInfoCvo).toString(): UserInfoCvo.fromJson,
    (UserInfoCvoSeries).toString(): UserInfoCvoSeries.fromJson,
    (UserInfoCvoSingle).toString(): UserInfoCvoSingle.fromJson,
    (UserInfoMerchantEventSwitchVO).toString(): UserInfoMerchantEventSwitchVO
        .fromJson,
    (UserInfoOss).toString(): UserInfoOss.fromJson,
    (UserInfoPca).toString(): UserInfoPca.fromJson,
    (UserInfoVideoManageVo).toString(): UserInfoVideoManageVo.fromJson,
    (UserInfoSettleSwitchVO).toString(): UserInfoSettleSwitchVO.fromJson,
    (UserPersonaliseEntity).toString(): UserPersonaliseEntity.fromJson,
    (VideoAnimationUrlEntity).toString(): VideoAnimationUrlEntity.fromJson,
    (VideoAnimationUrlAnimation3Url).toString(): VideoAnimationUrlAnimation3Url
        .fromJson,
    (VrHistoryDogEntity).toString(): VrHistoryDogEntity.fromJson,
    (VrHotEntity).toString(): VrHotEntity.fromJson,
    (VrHotTeam).toString(): VrHotTeam.fromJson,
    (VrMatchEntity).toString(): VrMatchEntity.fromJson,
    (VrRankingEntity).toString(): VrRankingEntity.fromJson,
    (VrSportReplayEntity).toString(): VrSportReplayEntity.fromJson,
    (VrSportReplayDetailValue).toString(): VrSportReplayDetailValue.fromJson,
    (VrSportReplayDetailScoreRanking)
        .toString(): VrSportReplayDetailScoreRanking.fromJson,
    (VrSportsMenuEntity).toString(): VrSportsMenuEntity.fromJson,
    (CollectionReq).toString(): CollectionReq.fromJson,
  };

  bool containsKey(String type) {
    return convertFuncMap.containsKey(type);
  }

  JsonConvertFunction? operator [](String key) {
    return convertFuncMap[key];
  }
}